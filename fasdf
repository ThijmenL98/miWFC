[1mdiff --git a/.idea/.idea.miWFC/.idea/avalonia.xml b/.idea/.idea.miWFC/.idea/avalonia.xml[m
[1mindex 16e0506..6ee7e5c 100644[m
[1m--- a/.idea/.idea.miWFC/.idea/avalonia.xml[m
[1m+++ b/.idea/.idea.miWFC/.idea/avalonia.xml[m
[36m@@ -3,7 +3,11 @@[m
   <component name="AvaloniaProject">[m
     <option name="projectPerEditor">[m
       <map>[m
[32m+[m[32m        <entry key="miWFC(Ava)/ContentControls/AdvancedPatternItemControl.axaml" value="miWFC(Ava)/miWFC.csproj" />[m
[32m+[m[32m        <entry key="miWFC(Ava)/ContentControls/SimplePatternItemControl.axaml" value="miWFC(Ava)/miWFC.csproj" />[m
[32m+[m[32m        <entry key="miWFC(Ava)/ContentControls/test.axaml" value="miWFC(Ava)/miWFC.csproj" />[m
         <entry key="miWFC(Ava)/Views/ItemWindow.axaml" value="miWFC(Ava)/miWFC.csproj" />[m
[32m+[m[32m        <entry key="miWFC(Ava)/Views/MainWindow.axaml" value="miWFC(Ava)/miWFC.csproj" />[m
         <entry key="miWFC(Ava)/Views/PaintingWindow.axaml" value="miWFC(Ava)/miWFC.csproj" />[m
       </map>[m
     </option>[m
[1mdiff --git a/miWFC(Ava)/ContentControls/SimplePatternItemControl.axaml b/miWFC(Ava)/ContentControls/SimplePatternItemControl.axaml[m
[1mindex 5148bd4..f51fc7a 100644[m
[1m--- a/miWFC(Ava)/ContentControls/SimplePatternItemControl.axaml[m
[1m+++ b/miWFC(Ava)/ContentControls/SimplePatternItemControl.axaml[m
[36m@@ -22,7 +22,7 @@[m
 							        CornerRadius="10"[m
 							        IsVisible="{ReflectionBinding #advancedPatternItemControl.DataContext.SimpleAdvancedEnabled, TargetNullValue=False, FallbackValue=False}">[m
 								<!-- ReSharper disable Xaml.BindingWithContextNotResolved -->[m
[31m-								<Grid RowDefinitions="*, *" ColumnDefinitions="*, *">[m
[32m+[m								[32m<Grid RowDefinitions="*, *" ColumnDefinitions="*, *, Auto">[m
 									<Border Width="50" Height="50" Grid.Row="0"[m
 									        BoxShadow="0 0 15 0.25 Black"[m
 									        Background="Gray" Margin="10, 5, 15, 5">[m
[36m@@ -157,8 +157,63 @@[m
 											</ToolTip.Tip>[m
 										</RepeatButton>[m
 									</Grid>[m
[32m+[m
[32m+[m									[32m<StackPanel Grid.Row="0" Grid.Column="2" IsEnabled="{Binding !#advancedPatternItemControl.DataContext.IsRunning}"[m
[32m+[m									[32m            HorizontalAlignment="Center" VerticalAlignment="Center" Width="30">[m
[32m+[m										[32m<Button MaxHeight="32" Padding="0" IsVisible="{Binding MayRotate}"[m
[32m+[m										[32m        Background="Transparent" Margin="1" Command="{Binding OnRotateClick}">[m
[32m+[m											[32m<Button.Styles>[m
[32m+[m												[32m<Style Selector="Button:disabled /template/ ContentPresenter">[m
[32m+[m													[32m<Setter Property="Opacity" Value="160" />[m
[32m+[m													[32m<Setter Property="Background" Value="Transparent" />[m
[32m+[m												[32m</Style>[m
[32m+[m												[32m<Style Selector="Button:pointerover /template/ ContentPresenter">[m
[32m+[m													[32m<Setter Property="Content" Value="{DynamicResource hoverRotateKey}" />[m
[32m+[m													[32m<Setter Property="Background" Value="Transparent" />[m
[32m+[m												[32m</Style>[m
[32m+[m												[32m<Style Selector="Button:pressed /template/ ContentPresenter">[m
[32m+[m													[32m<Setter Property="Content" Value="{DynamicResource clickRotateKey}" />[m
[32m+[m													[32m<Setter Property="Background" Value="Transparent" />[m
[32m+[m												[32m</Style>[m
[32m+[m											[32m</Button.Styles>[m
[32m+[m											[32m<Panel>[m
[32m+[m												[32m<Image Source="/Assets/RotateEnabled.png" IsVisible="{Binding !RotateDisabled}" />[m
[32m+[m												[32m<Image Source="/Assets/RotateDisabled.png" IsVisible="{Binding RotateDisabled}" />[m
[32m+[m											[32m</Panel>[m
[32m+[m											[32m<ToolTip.Tip>[m
[32m+[m												[32m<StackPanel>[m
[32m+[m													[32m<TextBlock TextWrapping="Wrap">Toggle whether this tile may rotate. Disabled means the tile is invariant to rotations.</TextBlock>[m
[32m+[m												[32m</StackPanel>[m
[32m+[m											[32m</ToolTip.Tip>[m
[32m+[m										[32m</Button>[m
[32m+[m										[32m<Button MaxHeight="32" Padding="0" IsVisible="{Binding MayFlip}"[m
[32m+[m										[32m        Background="Transparent" Margin="1" Command="{Binding OnFlipClick}">[m
[32m+[m											[32m<Button.Styles>[m
[32m+[m												[32m<Style Selector="Button:disabled /template/ ContentPresenter">[m
[32m+[m													[32m<Setter Property="Opacity" Value="160" />[m
[32m+[m													[32m<Setter Property="Background" Value="Transparent" />[m
[32m+[m												[32m</Style>[m
[32m+[m												[32m<Style Selector="Button:pointerover /template/ ContentPresenter">[m
[32m+[m													[32m<Setter Property="Content" Value="{DynamicResource hoverFlipKey}" />[m
[32m+[m													[32m<Setter Property="Background" Value="Transparent" />[m
[32m+[m												[32m</Style>[m
[32m+[m												[32m<Style Selector="Button:pressed /template/ ContentPresenter">[m
[32m+[m													[32m<Setter Property="Content" Value="{DynamicResource clickFlipKey}" />[m
[32m+[m													[32m<Setter Property="Background" Value="Transparent" />[m
[32m+[m												[32m</Style>[m
[32m+[m											[32m</Button.Styles>[m
[32m+[m											[32m<Panel>[m
[32m+[m												[32m<Image Source="/Assets/FlipEnabled.png" IsVisible="{Binding !FlipDisabled}" />[m
[32m+[m												[32m<Image Source="/Assets/FlipDisabled.png" IsVisible="{Binding FlipDisabled}" />[m
[32m+[m											[32m</Panel>[m
[32m+[m											[32m<ToolTip.Tip>[m
[32m+[m												[32m<StackPanel>[m
[32m+[m													[32m<TextBlock TextWrapping="Wrap">Toggle whether this tile may flip. Disabled means the tile is invariant to flipping.</TextBlock>[m
[32m+[m												[32m</StackPanel>[m
[32m+[m											[32m</ToolTip.Tip>[m
[32m+[m										[32m</Button>[m
[32m+[m									[32m</StackPanel>[m
 								</Grid>[m
[31m-								<!-- Until Here -->[m
 							</Border>[m
 [m
 							<!-- ReSharper disable once Xaml.BindingWithContextNotResolved -->[m
[1mdiff --git a/miWFC(Ava)/Managers/UIManager.cs b/miWFC(Ava)/Managers/UIManager.cs[m
[1mindex 0d68829..b57fc1c 100644[m
[1m--- a/miWFC(Ava)/Managers/UIManager.cs[m
[1m+++ b/miWFC(Ava)/Managers/UIManager.cs[m
[36m@@ -160,7 +160,7 @@[m [mpublic class UIManager {[m
 [m
         curBitmaps.Add(cur);[m
         similarityMap[patternCount] = new List<Bitmap> {pattern};[m
[31m-        TileViewModel tvm = new(pattern, weight, patternCount, rawIndex, cm: parentCM);[m
[32m+[m[32m        TileViewModel tvm = new(pattern, weight, patternCount, rawIndex, cm: parentCM, 0);[m
 [m
         patternCount++;[m
 [m
[1mdiff --git a/miWFC(Ava)/Managers/WFCHandler.cs b/miWFC(Ava)/Managers/WFCHandler.cs[m
[1mindex b02255b..e52516c 100644[m
[1m--- a/miWFC(Ava)/Managers/WFCHandler.cs[m
[1m+++ b/miWFC(Ava)/Managers/WFCHandler.cs[m
[36m@@ -403,7 +403,7 @@[m [mpublic class WFCHandler {[m
 [m
             tileSymmetries.Add(val, symmetries.ToArray());[m
 [m
[31m-            TileViewModel tvm = new(writeableBitmap, tileWeight, tileCache.Count - 1, val, parentCM, cardinality > 4);[m
[32m+[m[32m            TileViewModel tvm = new(writeableBitmap, tileWeight, tileCache.Count - 1, val, parentCM, cardinality);[m
             toAdd.Add(tvm);[m
             toAddPaint.Add(tvm);[m
         }[m
[36m@@ -435,6 +435,97 @@[m [mpublic class WFCHandler {[m
         return toAdd;[m
     }[m
 [m
[32m+[m[32m    public void updateTransformations() {[m
[32m+[m[32m        string inputImage = mainWindow.getInputControl().getInputImage();[m
[32m+[m
[32m+[m[32m        dbModel = new AdjacentModel();[m
[32m+[m
[32m+[m[32m        xRoot = XDocument.Load($"{AppContext.BaseDirectory}/samples/{inputImage}/data.xml").Root ??[m
[32m+[m[32m                new XElement("");[m
[32m+[m
[32m+[m[32m        tileSize = int.Parse(xRoot.Attribute("size")?.Value ?? "16", CultureInfo.InvariantCulture);[m
[32m+[m
[32m+[m[32m        Dictionary<int, Tuple<Color[], Tile>> tempCache = new();[m
[32m+[m[32m        tileSymmetries = new Dictionary<int, int[]>();[m
[32m+[m
[32m+[m[32m        foreach (TileViewModel tvm in mainWindowVM.PatternTiles) {[m
[32m+[m[32m            //TODO[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        foreach (XElement xTile in xRoot.Element("tiles")?.Elements("tile")!) {[m
[32m+[m[32m            MemoryStream ms = new(File.ReadAllBytes([m
[32m+[m[32m                $"{AppContext.BaseDirectory}/samples/{inputImage}/{xTile.Attribute("name")?.Value}.png"));[m
[32m+[m[32m            WriteableBitmap writeableBitmap = WriteableBitmap.Decode(ms);[m
[32m+[m
[32m+[m[32m            Color[] cur = extractColours(writeableBitmap);[m
[32m+[m[32m            int val = tempCache.Count;[m
[32m+[m[32m            Tile curTile = new(val);[m
[32m+[m[32m            tempCache.Add(val, new Tuple<Color[], Tile>(cur, curTile));[m
[32m+[m
[32m+[m[32m            int cardinality = char.Parse(xTile.Attribute("symmetry")?.Value ?? "X") switch {[m
[32m+[m[32m                'L' => 1,[m
[32m+[m[32m                'T' => 1,[m
[32m+[m[32m                'I' => 1,[m
[32m+[m[32m                '\\' => 1,[m
[32m+[m[32m                'F' => 1,[m
[32m+[m[32m                _ => 1[m
[32m+[m[32m            };[m
[32m+[m[41m            [m
[32m+[m[32m            List<int> symmetries = new();[m
[32m+[m
[32m+[m[32m            double tileWeight[m
[32m+[m[32m                = double.Parse(xTile.Attribute("weight")?.Value ?? "1.0", CultureInfo.InvariantCulture);[m
[32m+[m
[32m+[m[32m            for (int t = 1; t < cardinality; t++) {[m
[32m+[m[32m                int myIdx = tempCache.Count;[m
[32m+[m[32m                Color[] curCard = t <= 3[m
[32m+[m[32m                    ? rotate(tempCache[val + t - 1].Item1.ToArray(), tileSize)[m
[32m+[m[32m                    : reflect(tempCache[val + t - 4].Item1.ToArray(), tileSize);[m
[32m+[m
[32m+[m[32m                int rotation, shouldFlip = 1;[m
[32m+[m[32m                if (t <= 3) {[m
[32m+[m[32m                    rotation = -90 * t;[m
[32m+[m[32m                } else {[m
[32m+[m[32m                    rotation = -90 * (t - 4);[m
[32m+[m[32m                    shouldFlip = -1;[m
[32m+[m[32m                    if (t == 4) {[m
[32m+[m[32m                        shouldFlip = 1;[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[41m                [m
[32m+[m[32m                toAddPaint.Add([m
[32m+[m[32m                    new TileViewModel(writeableBitmap, tileWeight, tempCache.Count - 1, rotation, shouldFlip,[m
[32m+[m[32m                        parentCM));[m
[32m+[m[32m                tempCache.Add(myIdx, new Tuple<Color[], Tile>(curCard, new Tile(myIdx)));[m
[32m+[m[32m                symmetries.Add(myIdx);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            tileSymmetries.Add(val, symmetries.ToArray());[m
[32m+[m
[32m+[m[32m            TileViewModel tvm = new(writeableBitmap, tileWeight, tempCache.Count - 1, val, parentCM, cardinality);[m
[32m+[m[32m            toAddPaint.Add(tvm);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        const int sampleDimension = 50;[m
[32m+[m[32m        int[][] values = new int[sampleDimension][];[m
[32m+[m
[32m+[m[32m        int j = 0;[m
[32m+[m[32m        foreach (XElement xTile in xRoot.Element("rows")?.Elements("row")!) {[m
[32m+[m[32m            string[] row = xTile.Value.Split(',');[m
[32m+[m[32m            values[j] = new int[sampleDimension];[m
[32m+[m[32m            for (int k = 0; k < sampleDimension; k++) {[m
[32m+[m[32m                values[j][k] = int.Parse(row[k], CultureInfo.InvariantCulture);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            j++;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        ITopoArray<int> sample = TopoArray.create(values, false);[m
[32m+[m[32m        dbModel = new AdjacentModel(sample.toTiles());[m
[32m+[m
[32m+[m[32m        updateWeights();[m[41m [m
[32m+[m[32m    }[m
[32m+[m
     private (WriteableBitmap, bool) runWfcDB(int steps = 1) {[m
         Resolution dbStatus = Resolution.UNDECIDED;[m
 [m
[36m@@ -674,7 +765,7 @@[m [mpublic class WFCHandler {[m
                     }[m
                 }[m
 [m
[31m-                foreach ((double dist, List<Tuple<int, int>> keys) in distances.OrderBy(key => key.Key)) {[m
[32m+[m[32m                foreach ((double _, List<Tuple<int, int>> keys) in distances.OrderBy(key => key.Key)) {[m
                     foreach (Tuple<int, int> key in keys) {[m
                         distinctList[key] = tempList[key];[m
                     }[m
[1mdiff --git a/miWFC(Ava)/Templates/GlassIcon.psd b/miWFC(Ava)/Templates/GlassIcon.psd[m
[1mindex a4ee401..520bef7 100644[m
Binary files a/miWFC(Ava)/Templates/GlassIcon.psd and b/miWFC(Ava)/Templates/GlassIcon.psd differ
[1mdiff --git a/miWFC(Ava)/ViewModels/TileViewModel.cs b/miWFC(Ava)/ViewModels/TileViewModel.cs[m
[1mindex 9cb7666..dcdf1ea 100644[m
[1m--- a/miWFC(Ava)/ViewModels/TileViewModel.cs[m
[1m+++ b/miWFC(Ava)/ViewModels/TileViewModel.cs[m
[36m@@ -13,22 +13,26 @@[m [mpublic class TileViewModel : ReactiveObject {[m
     private double _patternWeight, _changeAmount = 1.0d;[m
 [m
     private readonly CentralManager? parentCM;[m
[31m-    private bool _flipDisabled, _rotateDisabled, _highlighted, _itemAddChecked;[m
[32m+[m[32m    private bool _flipDisabled, _rotateDisabled, _highlighted, _itemAddChecked, _mayRotate, _mayFlip, _mayTransform;[m
 [m
     /*[m
      * Used for input patterns[m
      */[m
     public TileViewModel(WriteableBitmap image, double weight, int index, int rawIndex, CentralManager cm,[m
[31m-        bool isF = false) {[m
[32m+[m[32m        int card) {[m
         PatternImage = image;[m
         PatternWeight = weight;[m
         PatternIndex = index;[m
         PatternRotation = 0;[m
[31m-        PatternFlipping = isF ? -1 : 1;[m
[32m+[m[32m        PatternFlipping = card > 4 ? -1 : 1;[m
         RawPatternIndex = rawIndex;[m
 [m
         parentCM = cm;[m
 [m
[32m+[m[32m        MayFlip = card > 4;[m
[32m+[m[32m        MayRotate = card > 1;[m
[32m+[m[32m        MayTransform = MayFlip || MayRotate;[m
[32m+[m
         FlipDisabled = false;[m
         RotateDisabled = false;[m
     }[m
[36m@@ -43,7 +47,7 @@[m [mpublic class TileViewModel : ReactiveObject {[m
         PatternWeight = weight;[m
         PatternRotation = patternRotation;[m
         PatternFlipping = patternFlipping;[m
[31m-[m
[32m+[m[41m        [m
         parentCM = cm;[m
     }[m
 [m
[36m@@ -119,6 +123,27 @@[m [mpublic class TileViewModel : ReactiveObject {[m
         set => this.RaiseAndSetIfChanged(ref _itemAddChecked, value);[m
     }[m
 [m
[32m+[m[32m    public bool MayRotate {[m
[32m+[m[32m        get => _mayRotate;[m
[32m+[m[32m        set {[m
[32m+[m[32m            this.RaiseAndSetIfChanged(ref _mayRotate, value);[m
[32m+[m[32m            MayTransform = MayFlip || MayRotate;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public bool MayFlip {[m
[32m+[m[32m        get => _mayFlip;[m
[32m+[m[32m        set {[m
[32m+[m[32m            this.RaiseAndSetIfChanged(ref _mayFlip, value);[m
[32m+[m[32m            MayTransform = MayFlip || MayRotate;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public bool MayTransform {[m
[32m+[m[32m        get => _mayTransform;[m
[32m+[m[32m        set => this.RaiseAndSetIfChanged(ref _mayTransform, value);[m
[32m+[m[32m    }[m
[32m+[m
     /*[m
      * Button callbacks[m
      */[m
[36m@@ -194,10 +219,14 @@[m [mpublic class TileViewModel : ReactiveObject {[m
 [m
     public void OnRotateClick() {[m
         RotateDisabled = !RotateDisabled;[m
[32m+[m[32m        parentCM!.getWFCHandler().updateTransformations();[m
[32m+[m[32m        parentCM!.getInputManager().restartSolution("Rotate toggle", true);[m
     }[m
 [m
     public void OnFlipClick() {[m
         FlipDisabled = !FlipDisabled;[m
[32m+[m[32m        parentCM!.getWFCHandler().updateTransformations();[m
[32m+[m[32m        parentCM!.getInputManager().restartSolution("Flip toggle", true);[m
     }[m
 [m
     public void OnCheckChange() {[m
[1mdiff --git a/miWFC(Ava)/Views/MainWindow.axaml b/miWFC(Ava)/Views/MainWindow.axaml[m
[1mindex 45fcc99..15b6e01 100644[m
[1m--- a/miWFC(Ava)/Views/MainWindow.axaml[m
[1m+++ b/miWFC(Ava)/Views/MainWindow.axaml[m
[36m@@ -4,7 +4,6 @@[m
         xmlns:d="http://schemas.microsoft.com/expression/blend/2008"[m
         xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"[m
         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"[m
[31m-        xmlns:ucontrols="using:miWFC.ContentControls"[m
         xmlns:viewModels="clr-namespace:miWFC.ViewModels"[m
         xmlns:contentControls="clr-namespace:miWFC.ContentControls"[m
         xmlns:avaloniaGif="clr-namespace:miWFC.AvaloniaGif"[m
