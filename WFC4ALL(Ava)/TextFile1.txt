
        /* ------------------------------------------------------------------------
         * Button Click Functions
         * ------------------------------------------------------------------------ */

        private void infoButton_Click(object sender, EventArgs e) {
            infoClicked = !infoClicked;

            closeButton.Visible = infoClicked;
            infoGraphicPB.Visible = infoClicked;

            foreach (Control c in Controls) {
                if (c != loadingPB && c != selHeurPanel && c != pattHeurPanel && c != closeButton
                    && c != infoGraphicPB) {
                    c.Visible = !infoClicked;
                }
            }
        }

        private void closeButton_Click(object sender, EventArgs e) {
            infoButton_Click(sender, e);
        }

        private void tabSelection_SelectedIndexChanged(object sender, EventArgs e) {
            int selIndex = ((TabControl) sender).SelectedIndex; // 0 = Task1, 1 = Task2, 2 = Sandbox

            bool notTask1Selected = selIndex != 0;
            bool sandboxSelected = selIndex == 2;

            inputPanel.Visible = notTask1Selected;
            inputImage.Visible = notTask1Selected;
            inputImageCB.Visible = notTask1Selected;
            inputPaddingPB.Visible = notTask1Selected;

            categoryCB.Visible = sandboxSelected;
            category.Visible = sandboxSelected;
            patternSize.Visible = sandboxSelected;
            patternSizeLabel.Visible = sandboxSelected;
            modelChoice.Visible = sandboxSelected;

            string selectedCategory, selectedImage;
            isChangingModels = true;

            if (selIndex == 0) {
                // Fixate Coloured City -> Cat: "Worlds Top-Down", inputImage: "ColoredCity"
                selectedCategory = "Worlds Top-Down";
                selectedImage = "ColoredCity";

                outputHeightValue.Value = 80;
                outputWidthValue.Value = 80;
            } else {
                selectedCategory = "Textures";
                selectedImage = "3Bricks";

                outputHeightValue.Value = 32;
                outputWidthValue.Value = 32;
            }

            changingIndex = true;
            string[] catDataSource = InputManager.getCategories("overlapping");
            categoryCB.DataSource = catDataSource;
            int catIndex = Array.IndexOf(catDataSource, selectedCategory);
            categoryCB.SelectedIndex = catIndex;
            categoryCB.Text = selectedCategory;

            string[] images = inputManager.getImages("overlapping", selectedCategory);

            inputImageCB.DataSource = images;
            int index = Array.IndexOf(images, selectedImage);
            inputImageCB.SelectedIndex = index;

            patternSize.Refresh();
            inputImageCB.Refresh();
            categoryCB.Refresh();

            isChangingModels = false;

            inputManager.setInputChanged("Tab change");
            inputImage_SelectedIndexChanged(inputImageCB, e);
        }

        /* ------------------------------------------------------------------------
         * Other Input Interaction Functions
         * ------------------------------------------------------------------------ */

        private void resultPB_Click(object sender, EventArgs e) {
            Point clickPos = ((PictureBox) sender).PointToClient(Cursor.Position);
            int clickX = clickPos.X, clickY = clickPos.Y, width = getOutputWidth(), height = getOutputHeight();
            int a = (int) Math.Floor((double) clickX * width / ((PictureBox) sender).Width),
                b = (int) Math.Floor((double) clickY * height / ((PictureBox) sender).Height);
#if (DEBUG)
            Console.WriteLine($@"(x:{clickX}, y:{clickY}) -> (a:{a}, b:{b})");
#endif
            //TODO CF2

            // Bitmap result2 = inputManager.setTile(a, b, 3);
            //
            // resultPB.Image = inputManager.resizeBitmap(result2,
            //     Math.Min(initOutHeight / (float) result2.Height, initOutWidth / (float) result2.Width));
        }

        private void inputPaddingPB_Click(object sender, EventArgs e) {
            Color c;
            Bitmap bm;
            if (inputPaddingEnabled()) {
                bm = new Bitmap(Resources.borderPaddingDisabled);
                c = Color.Red;
            } else {
                bm = new Bitmap(Resources.borderPaddingEnabled);
                c = Color.LawnGreen;
            }

            inputPaddingPB.Image = inputManager.resizePixels(inputPaddingPB, bm, 3, c, false);
            inputPaddingPB.BackColor = c;
            inputPaddingPB.Padding = new Padding(3);

            ((PictureBox) sender).Refresh();

            inputManager.setInputChanged("Input padding");
            executeButton_Click(null, null);
        }
    }
}